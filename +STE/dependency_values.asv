function T = dependency_values(RowNames, RowVars, ColNames, ColVars, ColPrecedence)
%Computes the degree of depenency between each of the ROW variables and
%each of the COLUMN variables. The resulting table has the form
%           |    | C1 from R | R from C1 |  ...
%           | R1 |           |           |
%           | R2 |           |           |
%             ?
%   Inputs:
%       RowNames -  Cell array containing the names of the row variables
%                   Each cell must contain a string
%       RowVars  -  Cell array containing the variables themselves. Each
%                   cell must contain a column vector
%       ColNames -  Cell array containing the names of the row variables
%                   Each cell must contain a string
%       ColVars  -  Cell array containing the variables themselves. Each
%                   cell must contain a column vector
%   ALL VECTORS MUST BE THE SAME SIZE
%       ColPrecedence - an array of logicals the length of ColNames
%                       indicating, for each, whether they should be the
%                       cause of the row variables. If not provided, it is
%                       assumed true for all by default.
%
%   Outputs:
%       a table of doubles indicating the degree on which each variable
%       depends on each other, labelled. 
    assert(length(RowNames) == length(RowVars));
    assert(length(ColNames) == length(ColVars));
    assert(nargin<length(ColNames) == length(ColPrecedence));
    
    %build names for columns
    dir1 = repmat(['';'_to_var'],size(ColNames));
    dir2 = repmat(['var_to_';''],size(ColNames));
    tmpNames = repmat('',size(ColNames)*2);
    
    for(i=1:size(ColNames))
        j=(i-1)*2;
        %we need each name twice
        tmpNames(j)   = ColNames(i);
        tmpNames(j+1) = ColNames(i);
        
        %since we're already iterating, let's check we have them in the
        %order the user wants
        if(ColPrecedence(i))
            %swap order columns will have by changing the names
            tmp = dir1(j) ;
            dir1(j)   = dir1(j+1);
            dir1(j+1) = tmp;
            tmp = dir2(j) ;
            dir2(j)   = dir2(j+1);
            dir2(j+1) = tmp;
        end
    end
    
    VariableNames = cat(dir1, tmpNames, dir2);
    
    T = array2table(zeros(length(RowNames),length(ColNames)),...
        'RowNames', RowNames, 'VariableNames', VariableNames);


end

